// Generated by Avo VERSION 47.24.0, PLEASE EDIT WITH CARE
/* eslint-disable */

(function(exports) {
  var __AVO_DEV__ = false;
  var __AVO_ENV__ = null;
  var __REPORT_FAILURE_AS__ = null;
  var __STRICT__ = null;

  var __MOBILE_DEBUGGER__ = null;

  // polyfill Array.isArray
  if (!Array.isArray) {
    Array.isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    };
  }

  // polyfill Object.assign
  if (typeof Object.assign !== 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, "assign", {
      value: function assign(target, varArgs) { // .length of function is 2
        if (target == null) { // TypeError if undefined or null
          throw new TypeError('Cannot convert undefined or null to object');
        }

        var to = Object(target);

        for (var index = 1; index < arguments.length; index++) {
          var nextSource = arguments[index];

          if (nextSource != null) { // Skip over if undefined or null
            for (var nextKey in nextSource) {
              // Avoid bugs when hasOwnProperty is shadowed
              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
        }
        return to;
      },
      writable: true,
      configurable: true
    });
  }

  // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
  if (!Object.keys) {
    Object.keys = (function() {
      'use strict';
      var hasOwnProperty = Object.prototype.hasOwnProperty,
          hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
          dontEnums = [
            'toString',
            'toLocaleString',
            'valueOf',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'constructor'
          ],
          dontEnumsLength = dontEnums.length;

      return function(obj) {
        if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {
          throw new TypeError('Object.keys called on non-object');
        }

        var result = [], prop, i;

        for (prop in obj) {
          if (hasOwnProperty.call(obj, prop)) {
            result.push(prop);
          }
        }

        if (hasDontEnumBug) {
          for (i = 0; i < dontEnumsLength; i++) {
            if (hasOwnProperty.call(obj, dontEnums[i])) {
              result.push(dontEnums[i]);
            }
          }
        }
        return result;
      };
    }());
  }

  // polyfill Array.indexOf
  if (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){
    "use strict";
    return function indexOf(member, fromIndex) {
      if(this===null||this===undefined)throw TypeError("Array.prototype.indexOf called on null or undefined");

      var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);
      if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;

      if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined
      }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN
      }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else

      return -1; // if the value was not found, then return -1
    };
  })(Object, Math.max, Math.min);

  var array_difference, AvoAssert, AvoLogger;
  array_difference = function array_difference(a1, a2) {
    var result = [];
    for (var i = 0; i < a1.length; i++) {
      if (a2.indexOf(a1[i]) === -1) {
        result.push(a1[i]);
      }
    }
    return result;
  }

  AvoAssert = {
    assertObject: function assertObject(propertyId, propName, obj) {
      if (typeof obj !== 'object') {
        var message = propName +
          ' should be of type object but you provided type ' +
          typeof obj +
          ' with value ' +
          JSON.stringify(obj);
        return [{tag: 'expectedObjectType', propertyId: propertyId, message: message, actualType: typeof obj}];
      } else {
        return [];
      }
    },

    assertString: function assertString(propertyId, propName, str) {
      if (typeof str !== 'string') {
        var message = propName +
          ' should be of type string but you provided type ' +
          typeof str +
          ' with value ' +
          JSON.stringify(str);
        return [{tag: 'expectedStringType', propertyId: propertyId, message: message, actualType: typeof str}];
      } else {
        return [];
      }
    },

    assertInt: function assertInt(propertyId, propName, int) {
      if (typeof int === 'number' && int !== Math.round(int)) {
        var message = propName +
          ' should be of type int but you provided type float with value ' +
          JSON.stringify(int);
        return [{tag: 'expectedIntType', propertyId: propertyId}];
      } else if (typeof int !== 'number') {
        var message = propName +
          ' should be of type int but you provided type ' +
          typeof int +
          ' with value ' +
          JSON.stringify(int);
        return [{tag: 'expectedIntType', propertyId: propertyId, message: message, actualType: typeof int}];
      } else {
        return [];
      }
    },

    assertLong: function assertLong(propertyId, propName, long) {
      if (typeof long === 'number' && long !== Math.round(long)) {
        var message = propName +
          ' should be of type long but you provided type float with value ' +
          JSON.stringify(long);
        return [{tag: 'expectedLongType', propertyId: propertyId}];
      } else if (typeof long !== 'number') {
        var message = propName +
          ' should be of type long but you provided type ' +
          typeof long +
          ' with value ' +
          JSON.stringify(long);
        return [{tag: 'expectedLongType', propertyId: propertyId, message: message, actualType: typeof long}];
      } else {
        return [];
      }
    },

    assertFloat: function assertFloat(propertyId, propName, float) {
      if (typeof float !== 'number') {
        var message = propName +
          ' should be of type float but you provided type ' +
          typeof float +
          ' with value ' +
          JSON.stringify(float);
        return [{tag: 'expectedFloatType', propertyId: propertyId, message: message, actualType: typeof float}];
      } else {
        return [];
      }
    },

    assertBool: function assertBool(propertyId, propName, bool) {
      if (typeof bool !== 'boolean') {
        var message = propName +
          ' should be of type boolean but you provided type ' +
          typeof bool +
          ' with value ' +
          JSON.stringify(bool);
        return [{tag: 'expectedBoolType', propertyId: propertyId, message: message, actualType: typeof bool}];
      } else {
        return [];
      }
    },

    assertMax: function assertMax(propertyId, propName, max, value) {
      if (value > max) {
        var message = propName +
          ' has a maximum value of ' +
          max +
          ' but you provided the value ' +
          JSON.stringify(value);
        return [{tag: 'expectedMax', propertyId: propertyId, message: message}];
      } else {
        return [];
      }
    },

    assertMin: function assertMin(propertyId, propName, min, value) {
      if (value < min) {
        var message = propName +
          ' has a minimum value of ' +
          min +
          ' but you provided the value ' +
          JSON.stringify(value);
        return [{tag: 'expectedMin', propertyId: propertyId, message: message}];
      } else {
        return [];
      }
    },

    assertList: function assertList(propertyId, propName, value) {
      if (!Array.isArray(value)) {
        var message = propName + ' should be of type list but you provided type ' + typeof value;
        return [{tag: 'expectedList', propertyId: propertyId, message: message, actualType: typeof value}];
      } else {
        return [];
      }
    },

    assertNoAdditionalProperties: function assertNoAdditionalProperties(eventName, input, spec) {
      var additionalKeys = array_difference(input, spec);
      if (additionalKeys.length) {
        var message = "Additional properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
        return [{tag: 'expectedNoAdditionalProperties', additionalProperties: additionalKeys, message: message}];
      } else {
        return [];
      }
    }
  };

  AvoLogger = {
    logEventSent: function logEventSent(eventName, eventProperties, userProperties) {
      console.log("[avo] Event Sent:", eventName, "Event Props:", eventProperties, "User Props:", userProperties);
    }
    };

var _avo_sampling_rate = 1.0;
function _avo_invoke_payload(body) {
  if (typeof window === 'undefined') { return; }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      fetch("https://api.avo.app/i", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(body)
      }).then(function(res) { return res.json(); }).then(function(data) { _avo_sampling_rate = data.sa; }).catch(function() {});
    }
  }
}

function _avo_invoke(eventId, hash, messages, origin) {
  _avo_invoke_payload({
    "ac": "B3XxC4ny4gR5LTZSHAMj",
    "br": "master",
    "en": __AVO_ENV__,
    "ev": eventId,
    "ha": hash,
    "sc": "0cd8DLUxoxnhXaqRxL6O",
    "se": (new Date()).toISOString(),
    "so": "_0pjEChMf",
    "va": messages.length === 0,
    "me": messages,
    "or": origin
  });
}

function _avo_invoke_meta(type, messages, origin) {
  _avo_invoke_payload({
    "ac": "B3XxC4ny4gR5LTZSHAMj",
    "br": "master",
    "en": __AVO_ENV__,
    "ty": type,
    "sc": "0cd8DLUxoxnhXaqRxL6O",
    "se": (new Date()).toISOString(),
    "so": "_0pjEChMf",
    "va": messages.length === 0,
    "me": messages,
    "or": origin
  });
}



  var Custom;
  function setup_(options, systemProperties, CustomDestination,
    destinationOptions) {
    if (options.validateProperties === true) {
      __AVO_DEV__ = true;
    }

    destinationOptions = destinationOptions || {};

    if (options.useProductionKey) {
    } else {
    }

    Custom = CustomDestination;
    Custom.make(options.useProductionKey);
    if (__AVO_DEV__) {
      // debug console in Avo
      _avo_invoke_meta('setup', [], 'setup');
    }
  }

  function initAvo(options, systemProperties, destinationOptions,
    CustomDestination) {
    if (__AVO_ENV__ !== null) {
      return;
    }
    __AVO_ENV__ = options.env.toLowerCase();
    if (options.strict !== undefined) {
      __STRICT__ = options.strict !== false;
    }
    if (options.reportFailureAs !== undefined) {
      __REPORT_FAILURE_AS__ = options.reportFailureAs;
    }
    if (options.debugger !== undefined) {
      __MOBILE_DEBUGGER__ = options.debugger;
    }
    if (__AVO_ENV__ !== 'prod') {
      __AVO_DEV__ = true;
    }

    destinationOptions = destinationOptions || {};

    if (__AVO_ENV__ === 'prod') {
    }
    if (__AVO_ENV__ === 'dev') {
    }

    Custom = CustomDestination;
    Custom.make(__AVO_ENV__);
    if (__AVO_DEV__) {
      // debug console in Avo
      _avo_invoke_meta('init', [], 'init');
    }
  }

  /**
   * App Opened: No description
   *
   * @see {@link https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/oZvpnm2MM}
   */
  function appOpened(properties) {
    properties = properties || {};
    if (__AVO_DEV__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) {
      // assert properties
      var messages = [];
      messages = messages.concat(AvoAssert.assertNoAdditionalProperties("App Opened", Object.keys(properties), [
      ]));
      // debug console in Avo
      _avo_invoke("oZvpnm2MM", "38946bd6e1f82fafe53f39b62e7817d36983768b98bc6f49cd13e2165665803b", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');

      AvoLogger.logEventSent("App Opened", {}, {});
      if (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled()) {
        // Avo mobile debugger
        __MOBILE_DEBUGGER__.postEvent("oZvpnm2MM", Date.now(), "App Opened", messages, [], []);
      }
      if ((__STRICT__ === null && !(__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) || __STRICT__) {
        // throw exception if messages is not empty
        if (messages.length !== 0) {
          throw new Error("Error sending event 'App Opened': " + messages[0].message)
        }
      } else {
        messages.forEach(function(m) {
          console[__REPORT_FAILURE_AS__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled() ? 'log' : 'error')]("[avo] " + m.message);
        });
      }
    }

    // destination Custom
    Custom.logEvent("App Opened", {});
  }

  /**
   * Play: No description
   *
   * @see {@link https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/6p9dLEHQVr}
   */
  function play(properties) {
    properties = properties || {};
    if (__AVO_DEV__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) {
      // assert properties
      var messages = [];
      messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Play", Object.keys(properties), [
      ]));
      // debug console in Avo
      _avo_invoke("6p9dLEHQVr", "daf6e996975e2e4ba1c72c60ba654e667d1df7b23667608ae2de51087798c4aa", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');

      AvoLogger.logEventSent("Play", {}, {});
      if (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled()) {
        // Avo mobile debugger
        __MOBILE_DEBUGGER__.postEvent("6p9dLEHQVr", Date.now(), "Play", messages, [], []);
      }
      if ((__STRICT__ === null && !(__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) || __STRICT__) {
        // throw exception if messages is not empty
        if (messages.length !== 0) {
          throw new Error("Error sending event 'Play': " + messages[0].message)
        }
      } else {
        messages.forEach(function(m) {
          console[__REPORT_FAILURE_AS__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled() ? 'log' : 'error')]("[avo] " + m.message);
        });
      }
    }

    // destination Custom
    Custom.logEvent("Play", {});
  }

  /**
   * Pause: No description
   *
   * @see {@link https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/Ei7HeAerpy}
   */
  function pause(properties) {
    properties = properties || {};
    if (__AVO_DEV__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) {
      // assert properties
      var messages = [];
      messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Pause", Object.keys(properties), [
      ]));
      // debug console in Avo
      _avo_invoke("Ei7HeAerpy", "c7f744d5b1df717853c6116b65fd2a418a31be2810b80dc41c55d9046fa2abcc", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');

      AvoLogger.logEventSent("Pause", {}, {});
      if (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled()) {
        // Avo mobile debugger
        __MOBILE_DEBUGGER__.postEvent("Ei7HeAerpy", Date.now(), "Pause", messages, [], []);
      }
      if ((__STRICT__ === null && !(__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) || __STRICT__) {
        // throw exception if messages is not empty
        if (messages.length !== 0) {
          throw new Error("Error sending event 'Pause': " + messages[0].message)
        }
      } else {
        messages.forEach(function(m) {
          console[__REPORT_FAILURE_AS__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled() ? 'log' : 'error')]("[avo] " + m.message);
        });
      }
    }

    // destination Custom
    Custom.logEvent("Pause", {});
  }

  /**
   * Play Next Track: No description
   *
   * @see {@link https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/rQvcOWggzs}
   */
  function playNextTrack(properties) {
    properties = properties || {};
    if (__AVO_DEV__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) {
      // assert properties
      var messages = [];
      messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Play Next Track", Object.keys(properties), [
      ]));
      // debug console in Avo
      _avo_invoke("rQvcOWggzs", "100026f6e39b8f2383cdd8cc80cb27f99d89d31931662c6724f3b6337341fccb", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');

      AvoLogger.logEventSent("Play Next Track", {}, {});
      if (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled()) {
        // Avo mobile debugger
        __MOBILE_DEBUGGER__.postEvent("rQvcOWggzs", Date.now(), "Play Next Track", messages, [], []);
      }
      if ((__STRICT__ === null && !(__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) || __STRICT__) {
        // throw exception if messages is not empty
        if (messages.length !== 0) {
          throw new Error("Error sending event 'Play Next Track': " + messages[0].message)
        }
      } else {
        messages.forEach(function(m) {
          console[__REPORT_FAILURE_AS__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled() ? 'log' : 'error')]("[avo] " + m.message);
        });
      }
    }

    // destination Custom
    Custom.logEvent("Play Next Track", {});
  }

  /**
   * Play Previous Track: No description
   *
   * @see {@link https://www.avo.app/schemas/0cd8DLUxoxnhXaqRxL6O/events/xBjjLugyOM}
   */
  function playPreviousTrack(properties) {
    properties = properties || {};
    if (__AVO_DEV__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) {
      // assert properties
      var messages = [];
      messages = messages.concat(AvoAssert.assertNoAdditionalProperties("Play Previous Track", Object.keys(properties), [
      ]));
      // debug console in Avo
      _avo_invoke("xBjjLugyOM", "c446c1687498d1c46cf3eb2820747855f6cb0817934b6f3fa0ebc579261acb41", messages.map(function(m) { return Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType}); }), 'event');

      AvoLogger.logEventSent("Play Previous Track", {}, {});
      if (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled()) {
        // Avo mobile debugger
        __MOBILE_DEBUGGER__.postEvent("xBjjLugyOM", Date.now(), "Play Previous Track", messages, [], []);
      }
      if ((__STRICT__ === null && !(__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled())) || __STRICT__) {
        // throw exception if messages is not empty
        if (messages.length !== 0) {
          throw new Error("Error sending event 'Play Previous Track': " + messages[0].message)
        }
      } else {
        messages.forEach(function(m) {
          console[__REPORT_FAILURE_AS__ || (__MOBILE_DEBUGGER__ !== null && __MOBILE_DEBUGGER__.isEnabled() ? 'log' : 'error')]("[avo] " + m.message);
        });
      }
    }

    // destination Custom
    Custom.logEvent("Play Previous Track", {});
  }

  exports.appOpened = appOpened;
  exports.play = play;
  exports.pause = pause;
  exports.playNextTrack = playNextTrack;
  exports.playPreviousTrack = playPreviousTrack;
  exports.setup_ = setup_;
  exports.initAvo = initAvo;
}(typeof exports === 'undefined' ? this.Avo = {} : exports));

// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["appOpened","play","pause","playNextTrack","playPreviousTrack"]
